from typing import List, Optional
from datetime import datetime

class NotificationManager:
    def __init__(self, bot):
        self.bot = bot
        self.subscribers = []

    async def notify_teacher_about_dispute(self, teacher_id: str, student_name: str, subject: str, description: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ"""
        message = (
            f"üîî –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞!\n"
            f"–û—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_name}\n"
            f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        )
        await self.bot.send_message(teacher_id, message)

    async def notify_students_about_news(self, student_ids: List[str], title: str, content: str):
        """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º"""
        message = f"üì¢ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n{title}\n\n{content}"
        for student_id in student_ids:
            try:
                await self.bot.send_message(student_id, message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {student_id}: {e}")

    async def notify_about_schedule_update(self, group_ids: List[str]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        message = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        for group_id in group_ids:
            try:
                await self.bot.send_message(group_id, message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ {group_id}: {e}")

    async def notify_all(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        for subscriber in self.subscribers:
            try:
                await subscriber.notify(message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É: {e}")

    def add_subscriber(self, subscriber):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if subscriber not in self.subscribers:
            self.subscribers.append(subscriber)

    def remove_subscriber(self, subscriber):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        if subscriber in self.subscribers:
            self.subscribers.remove(subscriber)